@inject IDialogService _dialogService
@inject ITimeboxService _timeboxService
@page "/daily"
@using BlazorCalendar
@using BlazorCalendar.Models
@using TimeSlice.WebApp.Services.Base
@using TimeSlice.WebApp.Services.Timebox
@attribute [StreamRendering]

<h1>Daily</h1>

@if(isLoading)
{
	<p><em>Loading...</em></p>	
}
else
{
	<MudDropContainer @ref="_mudDropContainer" T="DropItem" Items="_dropItems"
		ItemsSelector="@((item,dropzone) => item.Dropzone == dropzone)"
		ItemDropped="ItemDropped"
		Class="d-flex flex-row flex-grow-1">
		<ChildContent>
			@{
				<MudDropZone T="DropItem" Identifier="@_favoritesDropZoneId" Class="d-flex flex-column flex-grow-1 mr-4">
					<MudListSubheader>Favorites</MudListSubheader>
				</MudDropZone>

				var day = DateTime.Today;
				<MudList Clickable="true" Class="d-flex flex-column pa-0 ml-4">
					<MudListSubheader>Day</MudListSubheader>
					@for (int hour = 0; hour < 24; hour++)
					{
						DateTime hours = day.AddHours( hour );
						var dropzone = hours.Ticks.ToString();

						// MudList is necessary to make the DropZone clickable.
						<MudDropZone T="DropItem" Identifier="@dropzone" Class="border d-flex d-row flex-grow-1">
							<MudListItem OnClick="@(()=> OnHourClicked(dropzone))" Dense="true" Text="@hours.ToString("HH:mm")" Class="flew-grow-1" />
						</MudDropZone>
					}
				</MudList>
			}
		</ChildContent>
        <ItemRenderer>
            @if (context.Entry != null)
            {
                <MudListItem Dense="true" Text="@context.Entry.Code" Style="white-space: nowrap;width: 200px;" OnClick="@(() => OnEntryClicked(context.Entry))" />
            }
            else if(context.Usage != null)
            {
				<MudCard Class="ma-1">
					<MudListItem Dense="true" Text="@($"{context.Usage.Code} ({context.Usage.Duration.TotalHours.ToString()}h)")" Style="white-space: nowrap;width: 200px;" />
				</MudCard>
            }
        </ItemRenderer>
	</MudDropContainer>
}

@code {
	private bool isLoading = true;
	private List<TimeboxEntryDto> _dtoEntries = new List<TimeboxEntryDto>();
	private List<TimeboxUsageEntry> _usageEntries = new List<TimeboxUsageEntry>();
	private List<DropItem> _dropItems = new List<DropItem>();
	private MudDropContainer<DropItem> _mudDropContainer;
	private bool _doContainerRefresh;
	private string _favoritesDropZoneId = "favorites";

	public class DropItem
	{
		public string Dropzone { get; set; }
		public TimeboxEntryDto Entry { get; set; }
		public TimeboxUsageEntry Usage { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		await Refresh();
		isLoading = false;
	}

	protected override async Task OnAfterRenderAsync( bool firstRender )
	{
		if(_doContainerRefresh)
		{
			_doContainerRefresh = false;
			_mudDropContainer.Refresh();
		}
	}

	private async Task Refresh()
	{
		// Calendar entries.
		var response = await _timeboxService.GetAll();

		if( response.Success )
		{
			_dtoEntries = response.Data;
		}

		// Top favorites.
		if (response.Success)
		{
			ReadTimeboxEntries( ref response.Data );
		}

		// Convert both classes to drop items
		TransformDropItems();


		StateHasChanged();
		_doContainerRefresh = true;
	}

	private void TransformDropItems()
	{
		_dropItems.Clear();

		foreach (var entry in _dtoEntries)
		{
			_dropItems.Add(new DropItem
                {
                    Dropzone = entry.DateStart.Ticks.ToString(),
                    Entry = entry
                });
		}

		foreach (var entry in _usageEntries)
		{
			_dropItems.Add(new DropItem
                {
                    Dropzone = _favoritesDropZoneId,
                    Usage = entry
                });
		}
	}

	private async void OnHourClicked( string dropzone )
	{
		if( long.TryParse(dropzone, out long ticks) )
		{
			var date = new DateTime(ticks);
			var fakeTask = new TimeboxEntryDto
				{
					Id = -1,
					DateStart = date,
					DateEnd = date.AddHours( 1 )
				};


			await OpenTaskDialog( fakeTask );			
		}
	}

	private async void OnEntryClicked( TimeboxEntryDto item )
	{
		await OpenTaskDialog(item);
	}

	private async void ItemDropped( MudItemDropInfo<DropItem> dropItem )
	{
		if( dropItem.Item == null )
		{
			return;
		}

		if (long.TryParse( dropItem.DropzoneIdentifier, out long ticks ))
		{
			var date = new DateTime( ticks );

			if (dropItem.Item.Usage != null )
			{
				// A favorite has been dropped:
				// - we want to keep the favorite at it's drop zone, hence we dont change the dropzone
				// - MudDropZone will still move it at the bottom list, force a container refresh before the call is being finished
				// - otherwise we see the item visibily jump for a frame
				_doContainerRefresh = true;

				var dto = new TimeboxEntryDto()
					{
						Code = dropItem.Item.Usage.Code,
						DateStart = date,
						DateEnd = date.AddHours(1)
					};

				// Temporarily add a clone to give direct visual feedback to the user
				_dropItems.Add(new DropItem()
					{
						Dropzone = dropItem.DropzoneIdentifier,
						Entry = dto
					});

				await _timeboxService.Create( dto );
			}
			else if(dropItem.Item.Entry != null)
			{
				// A timebox entry has been moved, just update the date.
				dropItem.Item.Entry.DateStart = date;
				dropItem.Item.Entry.DateEnd = date.AddHours( 1 );

				await _timeboxService.Update( dropItem.Item.Entry.Id, dropItem.Item.Entry );
			}

			await Refresh();
		}
	}

	private void ReadTimeboxEntries( ref List<TimeboxEntryDto> entries )
	{
		var dictionary = new Dictionary<string, TimeSpan>();

		foreach (var entry in entries)
		{
			var duration = entry.DateEnd - entry.DateStart;

			if (dictionary.TryGetValue( entry.Code, out var existingDuration ))
			{
				dictionary[entry.Code] = existingDuration + duration;
			}
			else
			{
				dictionary.Add( entry.Code, duration );
			};
		}

		_usageEntries = dictionary
			.Select( x => new TimeboxUsageEntry { Code = x.Key, Duration = x.Value } )
			.OrderByDescending( x => x.Duration )
			.Take(5)
			.ToList();

		_usageEntries.OrderBy( x => x.Duration );
	}

	private async Task OpenTaskDialog(TimeboxEntryDto entryDto)
	{
		var day = entryDto.DateStart;
		var parameters = new DialogParameters<DialogTimeboxEntry>() { { x => x.Task, entryDto } };
		var options = new DialogOptions { CloseOnEscapeKey = true };
		var dialog = await _dialogService.ShowAsync<DialogTimeboxEntry>( "", parameters, options );
		var result = await dialog.Result;
		OnTasksUpdated( !result.Canceled );		
	}

	private async void OnTasksUpdated( bool success )
	{
		if( success )
		{
            await Refresh();
        }
	}
}
